"""
TornWAMP user-configurable structures.

- The processor dict can be extended to add custom processors to WAMP
  messages.
- The broadcast_messages function can be overwritten to change the
  behavior of how broadcast messages generated by processors (pubsub or
  rpc) are delivered. By default all broadcast messages are delivered to
  the topic defined in the broadcast message.
"""
from tornado import gen

from tornwamp import topic as tornwamp_topic
from tornwamp.processors import GoodbyeProcessor, HelloProcessor, pubsub, rpc
from tornwamp.messages import Code


processors = {
    Code.HELLO: HelloProcessor,
    Code.GOODBYE: GoodbyeProcessor,
    Code.SUBSCRIBE: pubsub.SubscribeProcessor,
    Code.CALL: rpc.CallProcessor,
    Code.PUBLISH: pubsub.PublishProcessor
}
#    2: 'welcome',
#    3: 'abort',
#    4: 'challenge',
#    5: 'authenticate',
#    7: 'heartbeat',
#    8: 'error',
#    17: 'published',
#    33: 'subscribed',
#    34: 'unsubscribe',
#    35: 'unsubscribed',
#    36: 'event',
#    49: 'cancel',
#    50: 'result',
#    64: 'register',
#    65: 'registered',
#    66: 'unregister',
#    67: 'unregistered',
#    68: 'invocation',
#    69: 'interrupt',
#    70: 'yield'


def broadcast_messages(processor):
    for msg in processor.broadcast_messages:
        tornwamp_topic.topics.publish(msg)
